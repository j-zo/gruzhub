"""change_auto_enum_type

Revision ID: 544e7428eac2
Revises: ea4105dee101
Create Date: 2024-11-16 14:49:34.570699

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "544e7428eac2"
down_revision: Union[str, None] = "ea4105dee101"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create a temporary column with varchar type
    op.add_column("auto", sa.Column("type_temp", sa.String(), nullable=True))

    # Copy data from enum[] column to temporary column
    op.execute('UPDATE "auto" SET type_temp = type::text')

    # Drop the original enum[] column
    op.drop_column("auto", "type")

    # Rename the temporary column to the original column name
    op.alter_column("auto", "type_temp", new_column_name="type")

    # Alter 'type' column to be not nullable
    op.alter_column("auto", "type", existing_type=sa.String(), nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create the enum type
    autotype_enum = postgresql.ENUM("TRUCK", "TRAILER", name="autotype")
    autotype_enum.create(op.get_bind())

    # Add a temporary column with enum[] type
    op.add_column(
        "auto",
        sa.Column("type_temp", postgresql.ARRAY(autotype_enum), nullable=True),
    )

    # Copy data from varchar column to temporary column
    op.execute('UPDATE "auto" SET type_temp = ARRAY[type::autotype]')

    # Drop the varchar column
    op.drop_column("auto", "type")

    # Rename the temporary column back to 'type'
    op.alter_column("auto", "type_temp", new_column_name="type")

    # Alter 'type' column to be not nullable
    op.alter_column(
        "auto",
        "type",
        existing_type=postgresql.ARRAY(autotype_enum),
        nullable=False,
    )

    # Drop the enum type if no longer needed
    autotype_enum.drop(op.get_bind())
    # ### end Alembic commands ###
