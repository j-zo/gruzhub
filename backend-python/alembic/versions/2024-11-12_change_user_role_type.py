"""change_user_role_type

Revision ID: d9736998a153
Revises: edee169c6960
Create Date: 2024-11-12 22:10:59.129716

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd9736998a153'
down_revision: Union[str, None] = 'edee169c6960'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create a temporary column with varchar type
    op.add_column('users', sa.Column('role_temp', sa.String(), nullable=True))

    # Copy data from enum column to temporary column
    op.execute('UPDATE users SET role_temp = role::text')

    # Drop the enum column
    op.drop_column('users', 'role')

    # Rename the temporary column to the original column name
    op.alter_column('users', 'role_temp', new_column_name='role')
    op.alter_column('users', 'role', existing_type=sa.String(), nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create the enum type
    userrole_enum = postgresql.ENUM('MASTER', 'CUSTOMER', 'DRIVER', 'ADMIN', name='userrole')
    userrole_enum.create(op.get_bind())

    # Create a temporary column with enum type
    op.add_column('users', sa.Column('role_temp', userrole_enum, nullable=False))

    # Copy data from varchar column to temporary column
    op.execute('UPDATE users SET role_temp = role::userrole')

    # Drop the varchar column
    op.drop_column('users', 'role')

    # Rename the temporary column to the original column name
    op.alter_column('users', 'role_temp', new_column_name='role')

    # Drop the enum type
    userrole_enum.drop(op.get_bind())
    # ### end Alembic commands ###