from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import Session
from http import HTTPStatus
from fastapi import HTTPException

from . import models
from . import schemas


class RegionsService:
    _is_initialized: bool

    def initialize(self, db: Session):
        self._create_all_countries_if_needed(db)
        self._create_all_regions_if_needed(db)

    async def get_regions(self, db: AsyncSession) -> list[schemas.Region]:
        regions_result = list((await db.execute(select(models.Region))).scalars())
        return [
            schemas.Region(
                id=region.id,
                name=region.name,
                country_code=region.country_code,
            )
            for region in regions_result
        ]

    async def get_region_by_id(
        self,
        db: AsyncSession,
        region_id: int,
    ) -> models.Region:
        result = (
            await db.execute(
                select(models.Region).where(models.Region.id == region_id).limit(1),
            )
        ).scalar()

        if not result:
            raise HTTPException(
                status_code=HTTPStatus.NOT_FOUND,
                detail=f"Region with ID {region_id} not found",
            )

        return result

    async def get_countries(self, db: AsyncSession) -> list[schemas.Country]:
        countries_result = list((await db.execute(select(models.Country))).scalars())

        countries_result = [
            country
            for country in countries_result
            if country.code in ("RU", "LV", "LT", "KZ", "KG", "BY")
        ]

        return [
            schemas.Country(code=country.code, name=country.name)
            for country in countries_result
        ]

    def _create_all_regions_if_needed(self, db: Session):
        regions_count = (
            db.execute(select(func.count()).select_from(models.Region))
        ).scalar()

        if regions_count and regions_count > 0:
            return

        for region in [
            ["Адыгея", "1", "RU"],
            ["Башкортостан", "2,102", "RU"],
            ["Бурятия", "3", "RU"],
            ["Алтай (Горный Алтай)", "4", "RU"],
            ["Дагестан", "5", "RU"],
            ["Ингушетия", "6", "RU"],
            ["Кабардино-Балкария", "7", "RU"],
            ["Калмыкия", "8", "RU"],
            ["Карачаево-Черкессия", "9", "RU"],
            ["Карелия", "10", "RU"],
            ["Коми", "11", "RU"],
            ["Марий Эл", "12", "RU"],
            ["Мордовия", "13,113", "RU"],
            ["Саха (Якутия)", "14", "RU"],
            ["Северная Осетия — Алания", "15", "RU"],
            ["Татарстан", "16,116,716", "RU"],
            ["Тыва", "17", "RU"],
            ["Удмуртия", "18", "RU"],
            ["Хакасия", "19", "RU"],
            ["Чувашия", "21,121", "RU"],
            ["Алтайский край", "22", "RU"],
            ["Краснодарский край", "23,93,123", "RU"],
            ["Красноярский край", "24,84,88,124", "RU"],
            ["Приморский край", "25,125", "RU"],
            ["Ставропольский край", "26,126", "RU"],
            ["Хабаровский край", "27", "RU"],
            ["Амурская область", "28", "RU"],
            ["Архангельская область", "29", "RU"],
            ["Астраханская область", "30", "RU"],
            ["Белгородская область", "31", "RU"],
            ["Брянская область", "32", "RU"],
            ["Владимирская область", "33", "RU"],
            ["Волгоградская область", "34,134", "RU"],
            ["Вологодская область", "35", "RU"],
            ["Воронежская область", "36,136", "RU"],
            ["Ивановская область", "37", "RU"],
            ["Иркутская область", "38,85,138", "RU"],
            ["Калининградская область", "39,91", "RU"],
            ["Калужская область", "40", "RU"],
            ["Камчатский край", "41", "RU"],
            ["Кемеровская область", "42,142", "RU"],
            ["Кировская область", "43", "RU"],
            ["Костромская область", "44", "RU"],
            ["Курганская область", "45", "RU"],
            ["Курская область", "46", "RU"],
            ["Ленинградская область", "47", "RU"],
            ["Липецкая область", "48", "RU"],
            ["Магаданская область", "49", "RU"],
            ["Московская область", "50,90,150,190,750", "RU"],
            ["Мурманская область", "51", "RU"],
            ["Нижегородская область", "52,152", "RU"],
            ["Новгородская область", "53", "RU"],
            ["Новосибирская область", "54,154", "RU"],
            ["Омская область", "55", "RU"],
            ["Оренбургская область", "56", "RU"],
            ["Орловская область", "57", "RU"],
            ["Пензенская область", "58", "RU"],
            ["Пермский край", "59,81,159", "RU"],
            ["Псковская область", "60", "RU"],
            ["Ростовская область", "61,161", "RU"],
            ["Рязанская область", "62", "RU"],
            ["Самарская область", "63,163", "RU"],
            ["Саратовская область", "64,164", "RU"],
            ["Сахалинская область", "65", "RU"],
            ["Свердловская область", "66,96,196", "RU"],
            ["Смоленская область", "67", "RU"],
            ["Тамбовская область", "68", "RU"],
            ["Тверская область", "69", "RU"],
            ["Томская область", "70", "RU"],
            ["Тульская область", "71", "RU"],
            ["Тюменская область", "72", "RU"],
            ["Ульяновская область", "73,173", "RU"],
            ["Челябинская область", "74,174", "RU"],
            ["Забайкальский край", "75,80", "RU"],
            ["Ярославская область", "76", "RU"],
            ["Москва", "77,97,99,177,197,199,777,799,977", "RU"],
            ["Санкт-Петербург", "78,98,178", "RU"],
            ["Еврейская автономная область", "79", "RU"],
            ["Крым", "82", "RU"],
            ["Ненецкий автономный округ", "83", "RU"],
            ["Ханты-Мансийский автономный округ — Югра", "86,186", "RU"],
            ["Чукотский автономный округ", "87", "RU"],
            ["Ямало-Ненецкий автономный округ", "89", "RU"],
            ["Севастополь", "92", "RU"],
            [
                "Территории за пределами РФ, обслуживаемые Департаментом режимных объектов МВД России",
                "94",
                "RU",
            ],
            ["Чечня", "95", "RU"],
            ["Рига", "-", "LV"],
            ["Вильнюс", "-", "LT"],
            ["Астана", "-", "KZ"],
            ["Бишкек", "-", "KG"],
            ["Минск", "-", "BY"],
        ]:
            self._create_region(db, region[0], region[1], region[2])

    def _create_region(
        self,
        session: Session,
        region_name: str,
        region_codes: str,
        country_code: str,
    ):
        existing_region = (
            session.execute(
                select(models.Region).where(models.Region.name == region_name).limit(1),
            )
        ).scalar_one_or_none()

        if existing_region is not None:
            return

        region = models.Region()
        region.name = region_name
        region.codes = region_codes
        region.country_code = country_code
        session.add(region)
        session.commit()

    def _create_all_countries_if_needed(self, db: Session):
        for country in [
            ["Абхазия", "AB"],
            ["Австралия", "AU"],
            ["Австрия", "AT"],
            ["Азербайджан", "AZ"],
            ["Албания", "AL"],
            ["Алжир", "DZ"],
            ["Американское Самоа", "AS"],
            ["Ангилья", "AI"],
            ["Ангола", "AO"],
            ["Андорра", "AD"],
            ["Антарктида", "AQ"],
            ["Антигуа и Барбуда", "AG"],
            ["Аргентина", "AR"],
            ["Армения", "AM"],
            ["Аруба", "AW"],
            ["Афганистан", "AF"],
            ["Багамы", "BS"],
            ["Бангладеш", "BD"],
            ["Барбадос", "BB"],
            ["Бахрейн", "BH"],
            ["Беларусь", "BY"],
            ["Белиз", "BZ"],
            ["Бельгия", "BE"],
            ["Бенин", "BJ"],
            ["Бермуды", "BM"],
            ["Болгария", "BG"],
            ["Боливия, Многонациональное Государство", "BO"],
            ["Бонайре, Саба и Синт-Эстатиус", "BQ"],
            ["Босния и Герцеговина", "BA"],
            ["Ботсвана", "BW"],
            ["Бразилия", "BR"],
            ["Британская территория в Индийском океане", "IO"],
            ["Бруней-Даруссалам", "BN"],
            ["Буркина-Фасо", "BF"],
            ["Бурунди", "BI"],
            ["Бутан", "BT"],
            ["Вануату", "VU"],
            ["Венгрия", "HU"],
            ["Венесуэла Боливарианская Республика", "VE"],
            ["Виргинские острова, Британские", "VG"],
            ["Виргинские острова, США", "VI"],
            ["Вьетнам", "VN"],
            ["Габон", "GA"],
            ["Гаити", "HT"],
            ["Гайана", "GY"],
            ["Гамбия", "GM"],
            ["Гана", "GH"],
            ["Гваделупа", "GP"],
            ["Гватемала", "GT"],
            ["Гвинея", "GN"],
            ["Гвинея-Бисау", "GW"],
            ["Германия", "DE"],
            ["Гернси", "GG"],
            ["Гибралтар", "GI"],
            ["Гондурас", "HN"],
            ["Гонконг", "HK"],
            ["Гренада", "GD"],
            ["Гренландия", "GL"],
            ["Греция", "GR"],
            ["Грузия", "GE"],
            ["Гуам", "GU"],
            ["Дания", "DK"],
            ["Джерси", "JE"],
            ["Джибути", "DJ"],
            ["Доминика", "DM"],
            ["Доминиканская Республика", "DO"],
            ["Египет", "EG"],
            ["Замбия", "ZM"],
            ["Западная Сахара", "EH"],
            ["Зимбабве", "ZW"],
            ["Израиль", "IL"],
            ["Индия", "IN"],
            ["Индонезия", "ID"],
            ["Иордания", "JO"],
            ["Ирак", "IQ"],
            ["Иран, Исламская Республика", "IR"],
            ["Ирландия", "IE"],
            ["Исландия", "IS"],
            ["Испания", "ES"],
            ["Италия", "IT"],
            ["Йемен", "YE"],
            ["Кабо-Верде", "CV"],
            ["Казахстан", "KZ"],
            ["Камбоджа", "KH"],
            ["Камерун", "CM"],
            ["Канада", "CA"],
            ["Катар", "QA"],
            ["Кения", "KE"],
            ["Кипр", "CY"],
            ["Киргизия", "KG"],
            ["Кирибати", "KI"],
            ["Китай", "CN"],
            ["Кокосовые (Килинг) острова", "CC"],
            ["Колумбия", "CO"],
            ["Коморы", "KM"],
            ["Конго", "CG"],
            ["Конго, Демократическая Республика", "CD"],
            ["Корея, Народно-Демократическая Республика", "KP"],
            ["Корея, Республика", "KR"],
            ["Коста-Рика", "CR"],
            ["Кот д'Ивуар", "CI"],
            ["Куба", "CU"],
            ["Кувейт", "KW"],
            ["Кюрасао", "CW"],
            ["Лаос", "LA"],
            ["Латвия", "LV"],
            ["Лесото", "LS"],
            ["Ливан", "LB"],
            ["Ливийская Арабская Джамахирия", "LY"],
            ["Либерия", "LR"],
            ["Лихтенштейн", "LI"],
            ["Литва", "LT"],
            ["Люксембург", "LU"],
            ["Маврикий", "MU"],
            ["Мавритания", "MR"],
            ["Мадагаскар", "MG"],
            ["Майотта", "YT"],
            ["Макао", "MO"],
            ["Малави", "MW"],
            ["Малайзия", "MY"],
            ["Мали", "ML"],
            ["Малые Тихоокеанские отдаленные острова Соединенных Штатов", "UM"],
            ["Мальдивы", "MV"],
            ["Мальта", "MT"],
            ["Марокко", "MA"],
            ["Мартиника", "MQ"],
            ["Маршалловы острова", "MH"],
            ["Мексика", "MX"],
            ["Микронезия, Федеративные Штаты", "FM"],
            ["Мозамбик", "MZ"],
            ["Молдова, Республика", "MD"],
            ["Монако", "MC"],
            ["Монголия", "MN"],
            ["Монтсеррат", "MS"],
            ["Мьянма", "MM"],
            ["Намибия", "NA"],
            ["Науру", "NR"],
            ["Непал", "NP"],
            ["Нигер", "NE"],
            ["Нигерия", "NG"],
            ["Нидерланды", "NL"],
            ["Никарагуа", "NI"],
            ["Ниуэ", "NU"],
            ["Новая Зеландия", "NZ"],
            ["Новая Каледония", "NC"],
            ["Норвегия", "NO"],
            ["Объединенные Арабские Эмираты", "AE"],
            ["Оман", "OM"],
            ["Остров Буве", "BV"],
            ["Остров Мэн", "IM"],
            ["Остров Норфолк", "NF"],
            ["Остров Рождества", "CX"],
            ["Остров Херд и острова Макдональд", "HM"],
            ["Острова Кайман", "KY"],
            ["Острова Кука", "CK"],
            ["Острова Теркс и Кайкос", "TC"],
            ["Пакистан", "PK"],
            ["Палау", "PW"],
            ["Палестинская территория, оккупированная", "PS"],
            ["Панама", "PA"],
            ["Папский Престол (Государство — город Ватикан)", "VA"],
            ["Папуа-Новая Гвинея", "PG"],
            ["Парагвай", "PY"],
            ["Перу", "PE"],
            ["Питкерн", "PN"],
            ["Польша", "PL"],
            ["Португалия", "PT"],
            ["Пуэрто-Рико", "PR"],
            ["Республика Македония", "MK"],
            ["Реюньон", "RE"],
            ["Россия", "RU"],
            ["Руанда", "RW"],
            ["Румыния", "RO"],
            ["Самоа", "WS"],
            ["Сан-Марино", "SM"],
            ["Сан-Томе и Принсипи", "ST"],
            ["Саудовская Аравия", "SA"],
            ["Святая Елена, Остров вознесения, Тристан-да-Кунья", "SH"],
            ["Северные Марианские острова", "MP"],
            ["Сен-Бартельми", "BL"],
            ["Сен-Мартен", "MF"],
            ["Сенегал", "SN"],
            ["Сент-Винсент и Гренадины", "VC"],
            ["Сент-Китс и Невис", "KN"],
            ["Сент-Люсия", "LC"],
            ["Сент-Пьер и Микелон", "PM"],
            ["Сербия", "RS"],
            ["Сейшелы", "SC"],
            ["Сингапур", "SG"],
            ["Синт-Мартен", "SX"],
            ["Сирийская Арабская Республика", "SY"],
            ["Словакия", "SK"],
            ["Словения", "SI"],
            ["Соединенное Королевство", "GB"],
            ["Соединенные Штаты", "US"],
            ["Соломоновы острова", "SB"],
            ["Сомали", "SO"],
            ["Судан", "SD"],
            ["Суринам", "SR"],
            ["Сьерра-Леоне", "SL"],
            ["Таджикистан", "TJ"],
            ["Таиланд", "TH"],
            ["Тайвань (Китай)", "TW"],
            ["Танзания, Объединенная Республика", "TZ"],
            ["Тимор-Лесте", "TL"],
            ["Того", "TG"],
            ["Токелау", "TK"],
            ["Тонга", "TO"],
            ["Тринидад и Тобаго", "TT"],
            ["Тувалу", "TV"],
            ["Тунис", "TN"],
            ["Туркмения", "TM"],
            ["Турция", "TR"],
            ["Уганда", "UG"],
            ["Узбекистан", "UZ"],
            ["Украина", "UA"],
            ["Уоллис и Футуна", "WF"],
            ["Уругвай", "UY"],
            ["Фарерские острова", "FO"],
            ["Фиджи", "FJ"],
            ["Филиппины", "PH"],
            ["Финляндия", "FI"],
            ["Фолклендские острова (Мальвинские)", "FK"],
            ["Франция", "FR"],
            ["Французская Гвиана", "GF"],
            ["Французская Полинезия", "PF"],
            ["Французские Южные территории", "TF"],
            ["Хорватия", "HR"],
            ["Центрально-Африканская Республика", "CF"],
            ["Чад", "TD"],
            ["Черногория", "ME"],
            ["Чешская Республика", "CZ"],
            ["Чили", "CL"],
            ["Швейцария", "CH"],
            ["Швеция", "SE"],
            ["Шпицберген и Ян Майен", "SJ"],
            ["Шри-Ланка", "LK"],
            ["Эквадор", "EC"],
            ["Экваториальная Гвинея", "GQ"],
            ["Эландские острова", "AX"],
            ["Эль-Сальвадор", "SV"],
            ["Эритрея", "ER"],
            ["Эсватини", "SZ"],
            ["Эстония", "EE"],
            ["Эфиопия", "ET"],
            ["Южная Африка", "ZA"],
            ["Южная Джорджия и Южные Сандвичевы острова", "GS"],
            ["Южная Осетия", "OS"],
            ["Южный Судан", "SS"],
            ["Ямайка", "JM"],
            ["Япония", "JP"],
        ]:
            self._create_country(db, country[0], country[1])

    def _create_country(
        self,
        session: Session,
        country_name: str,
        country_code: str,
    ):
        existing_country = (
            session.execute(
                select(models.Country).where(models.Country.name == country_name).limit(1),
            )
        ).scalar_one_or_none()

        if existing_country is not None:
            return

        country = models.Country()
        country.name = country_name
        country.code = country_code
        session.add(country)
        session.commit()
